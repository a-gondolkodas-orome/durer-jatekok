(function(){var e={6203:function(e){var t='<div class="p-4"> <router-view></router-view> </div> ';e.exports=t},8773:function(e){var t="<div class=\"animate-spin h-8 w-8 place-self-center border-t-blue-600 rounded-full border-4\" :style=\"{ 'visibility': isEnemyMoveInProgress ? 'visible' : 'hidden' }\"></div> ";e.exports=t},2448:function(e){var t='<div> <template v-if="game"> <button class="rounded-lg px-4 bg-blue-400 hover:bg-blue-600 js-back-to-overview" @click="goBackToOverview()">&lt; Vissza a listához</button> <h1 class="text-blue-600 text-2xl font-bold pb-4">{{ game.name }}</h1> <hr/> <component :is="gameId"></component> </template> <page-not-found v-if="!game"></page-not-found> </div> ';e.exports=t},5470:function(e){var t='<div> <p class="text-justify"> Ez egy példa játék Az új leosztás gombra kattintva generálhatsz egy felállást. A felállás ismeretében te döntheted el, hogy kezdeni szeretnél-e, vagy második játékos lenni. Sok sikert! :) </p> <div class="flex flex-wrap" id="demonstration"> <div class="game__board"> <button v-if="shouldPlayerMoveNext && isGameInProgress" class="game__cta-button" @click="playerMove({ board: [], isGameEnd: true })">Lépek!</button> </div> <div class="p-1 flex flex-col flex-grow flex-shrink-0 basis-80"> <p class="text-center font-bold text-lg">{{ ctaText }}</p> <enemy-loader/> <p class="italic text-justify">{{ stepDescription }}</p> <button v-if="isGameReadyToStart" class="game__cta-button js-first-player" @click="startGameAsPlayer({ isFirst: true })"> Kezdő leszek </button> <button v-if="isGameReadyToStart" class="game__cta-button js-second-player" @click="startGameAsPlayer({ isFirst: false })"> Második leszek </button> <div class="flex flex-grow items-end"> <button class="game__cta-button mt-4 js-restart-game" @click="initializeGame()"> Új leosztás </button> </div> </div> </div> </div> ';e.exports=t},3814:function(e){var t='<div> <p class="text-justify"> Ez a játék a XIII. Dürer döntőjén szerepelt E+ kategóriában. A pályán kezdetben négy kupac korong van. A soron következő játékos először az egyik kupacot teljes egészében kiveszi a játékból; majd egy másik kupacot kettéoszt két kisebb kupacra (mindkettőbe legalább 1 korongnak kerülnie kell). Egy lépést követően tehát újra 4 kupac marad. Az a játékos veszít, aki nem tud szabályosan lépni (azaz egyik kupacot se tudja szétosztani). Az új leosztás gombra kattintva generálhatsz egy felállást. A felállás ismeretében te döntheted el, hogy kezdeni szeretnél-e, vagy második játékos lenni. Sok sikert! :) </p> <div class="flex flex-wrap" id="heap-splitter"> <div class="game__board"> <div v-for="rowIndex in [0, 1, 2, 3]" class="game__pile" :class="{ \'border-b-black border-b-2\': rowIndex === 3 }"> <template v-for="(_, pieceIndex) in board[rowIndex]"> <span v-if="shouldShowDividerToTheLeft({ rowIndex, pieceIndex })" class="inline-block border-r-black border-r-4 h-16 border-dotted -ml-1"></span> <span :class="{ \'bg-red-600\': rowColor({ rowIndex }) === \'red\', \'bg-blue-600\': rowColor({ rowIndex }) === \'blue\', \'opacity-50\': (!shouldPlayerMoveNext && isGameInProgress) || rowIndex === removedRowIndex }" class="game__piece rounded-full mr-1" :style="{ \'pointer-events\': shouldPlayerMoveNext ? \'auto\' : \'none\', \'cursor\': pieceClickNotAllowed({ rowIndex, pieceIndex }) ? \'not-allowed\' : \'pointer\' }" @click="clickPiece({ rowIndex, pieceIndex })" @mouseover="hoveredPiece = { rowIndex, pieceIndex }" @mouseout="hoveredPiece = null"></span> </template> <span class="inline-block h-16 align-middle px-2 text-xl -mt-4"> {{ currentChoiceDescription(rowIndex) }} </span> </div> </div> <div class="p-1 flex flex-col flex-grow flex-shrink-0 basis-80"> <p class="text-center font-bold text-lg">{{ ctaText }}</p> <enemy-loader/> <p class="italic text-justify">{{ stepDescription }}</p> <button v-if="isGameReadyToStart" class="game__cta-button js-first-player" @click="startGameAsPlayer({ isFirst: true })"> Kezdő leszek </button> <button v-if="isGameReadyToStart" class="game__cta-button js-second-player" @click="startGameAsPlayer({ isFirst: false })"> Második leszek </button> <div class="flex flex-grow items-end"> <button class="game__cta-button mt-4 js-restart-game" @click="initializeGame()"> Új leosztás </button> </div> </div> </div> </div> ';e.exports=t},464:function(e){var t='<div> <p class="text-justify"> A pályán mindig két kupac korong található. A soron következő játékos választ egy kupacot, és azt szétosztja két kisebb kupacra (mindkettőbe legalább 1 korongnak kerülnie kell), a másik kupacot pedig kidobjuk. Az a játékos veszít, aki nem tud szabályosan lépni (azaz egyik kupacot se tudja szétosztani). Az új leosztás gombra kattintva generálhatsz egy felállást. A felállás ismeretében te döntheted el, hogy kezdeni szeretnél-e, vagy második játékos lenni. Sok sikert! :) </p> <div class="flex flex-wrap" id="heap-splitter"> <div class="game__board"> <div v-for="rowIndex in [0, 1]" class="game__pile" :class="{ \'border-b-black border-b-2\': rowIndex === 1 }"> <template v-for="(_, pieceIndex) in board[rowIndex]"> <span v-if="shouldShowDividerToTheLeft({ rowIndex, pieceIndex })" class="inline-block border-r-black border-r-4 h-16 border-dotted -ml-1"></span> <span :class="{ \'opacity-50\': !shouldPlayerMoveNext && isGameInProgress }" class="game__piece bg-blue-600 rounded-full mr-1" :style="{ \'pointer-events\': shouldPlayerMoveNext ? \'auto\' : \'none\', \'cursor\': pieceIndex === 0 ? \'not-allowed\' : \'pointer\' }" @click="clickPiece({ rowIndex, pieceIndex })" @mouseover="hoveredPiece = { rowIndex, pieceIndex }" @mouseout="hoveredPiece = null"></span> </template> <span class="inline-block h-16 align-middle px-2 text-xl -mt-4"> {{ currentChoiceDescription(rowIndex) }} </span> </div> </div> <div class="p-1 flex flex-col flex-grow flex-shrink-0 basis-80"> <p class="text-center font-bold text-lg">{{ ctaText }}</p> <enemy-loader/> <p class="italic text-justify">{{ stepDescription }}</p> <button v-if="isGameReadyToStart" class="game__cta-button js-first-player" @click="startGameAsPlayer({ isFirst: true })"> Kezdő leszek </button> <button v-if="isGameReadyToStart" class="game__cta-button js-second-player" @click="startGameAsPlayer({ isFirst: false })"> Második leszek </button> <div class="flex flex-grow items-end"> <button class="game__cta-button mt-4 js-restart-game" @click="initializeGame()"> Új leosztás </button> </div> </div> </div> </div> ';e.exports=t},2428:function(e,t,a){var s=a(7091),r=a(9259),o=s(r),i='<div> <svg style="display:none"> <symbol id="game-soldier-icon" viewBox="0 0 298.167 298.167"> <g> <polygon points="87.226,49.664 87.226,103.334 141.228,103.334 \t"/> <path d="M57.737,224.637c4.569-0.903,9.541-2.088,14.62-3.407c-1.152-5.343-1.774-10.881-1.774-16.564\n          c0-19.615,7.248-37.558,19.186-51.332h118.631c11.937,13.774,19.185,31.717,19.185,51.332c0,5.683-0.622,11.221-1.774,16.564\n          c5.079,1.319,10.051,2.503,14.62,3.407c1.406-6.438,2.154-13.118,2.154-19.971c0-20.161-6.415-38.852-17.31-54.14\n          c3.8-2.721,6.285-7.162,6.285-12.192c0-8.284-6.716-15-15-15h-5h-124h-6c-8.284,0-15,6.716-15,15c0,5.045,2.498,9.496,6.316,12.216\n          c-10.885,15.284-17.293,33.966-17.293,54.116C55.582,211.519,56.33,218.199,57.737,224.637z"/> <path d="M149.083,283.167c-11.725,0-22.848-2.602-32.849-7.23c-10.838-0.202-20.728-0.808-29.685-1.821\n          c16.578,14.942,38.511,24.052,62.533,24.052c24.023,0,45.955-9.109,62.533-24.051c-8.958,1.013-18.847,1.618-29.685,1.82\n          C171.931,280.565,160.808,283.167,149.083,283.167z"/> <circle cx="183.987" cy="184.168" r="12.465"/> <circle cx="114.18" cy="184.168" r="12.465"/> <path d="M168.083,221.334c-4.304,0-8.276,1.383-11.524,3.712v-25.397c0-4.107-3.165-7.688-7.271-7.811\n          c-4.247-0.127-7.729,3.277-7.729,7.496c0,9.756,0,15.835,0,25.678c-3.239-2.309-7.193-3.678-11.476-3.678\n          c-7.958,0-56.993,11.918-79.534,17.277c-5.048,1.2-5.868,7.975-1.294,10.425c20.996,11.245,59.479,11.982,75.34,11.982\n          c2.388,0,4.263-0.017,5.488-0.017c8.982,0,16.56-5.975,19-14.163c2.44,8.188,10.019,14.163,19,14.163\n          c1.225,0,3.103,0.017,5.488,0.017c15.858,0,54.344-0.735,75.34-11.982c4.574-2.45,3.755-9.225-1.294-10.426\n          C225.078,233.251,176.042,221.334,168.083,221.334z"/> <path d="M210.4,27.163c-2.574-6.903-9.207-11.829-17.008-11.829h-27.1C165.3,6.704,157.98,0,149.083,0s-16.217,6.704-17.209,15.334\n          h-26.148c-8.076,0-14.912,5.273-17.276,12.561l60.609,60.61L210.4,27.163z"/> <polygon points="211.226,103.334 211.226,48.664 156.89,103.334 \t"/> </g> </symbol> </svg> <p class="text-justify"> A török szultán serege megtámadta Hunyadi várát. A várlépcső egyes fokain néhány janicsár áll. Minden reggel a szultán kettéosztja a hadseregét egy piros és egy kék hadtestre. Hunyadi a nap folyamán vagy a piros, vagy a kék sereget megsemmisíti, választása szerint. Éjszaka minden megmaradt janicsár egy lépcsőfokot fellép. Hunyadi nyer, ha a szultán egész seregét megsemmisítette. A szultán nyer, ha lesz olyan janicsár, aki felér a várhoz. Az új játék gombra kattintva generálhatsz egy felállást. A felállás ismeretében te döntheted e, hogy Hunyadiként vagy a török szultánként szeretnél-e játszani. Sok sikert! :) </p> <div class="flex flex-wrap" id="hunyadi-and-the-janissaries"> <div class="game__board"> <img src="'+o+'" style="display:block;margin:auto"> <div v-for="rowIndex in [0, 1, 2, 3, 4]" class="game__pile" :class="{ \'border-b-black border-b-2\': rowIndex === 4 }"> <span v-for="(group, pieceIndex) in board[rowIndex]" class="game__piece mx-1 js-clickable-soldier" @click="toggleGroup(rowIndex, pieceIndex)"> <svg class="game__piece" :class="group === \'blue\' ? \'fill-blue-600\' : \'fill-red-600\'"> <use xlink:href="#game-soldier-icon"/> </svg> </span> </div> </div> <div class="p-1 flex flex-col flex-grow flex-shrink-0 basis-80"> <p class="text-center font-bold text-lg">{{ ctaText }}</p> <enemy-loader/> <p class="italic text-justify">{{ stepDescription }}</p> <template v-if="isGameReadyToStart"> <button class="game__cta-button js-second-player" @click="startGameAsPlayer({ isFirst: false })"> Hunyadi leszek </button> <button class="game__cta-button js-first-player" @click="startGameAsPlayer({ isFirst: true })"> Szultán leszek </button> </template> <template v-if="isGameInProgress"> <button v-if="isPlayerSultan" :class="{ \'opacity-50\': isEnemyMoveInProgress }" class="game__cta-button js-finalize-groups" @click="finalizeSoldierGrouping()"> Lépek </button> <button v-if="!isPlayerSultan" :class="{ \'opacity-50\': isEnemyMoveInProgress }" class="game__cta-button bg-red-400 hover:bg-red-600 js-kill-red" @click="killGroup(\'red\')"> Legyőzöm a pirosakat </button> <button v-if="!isPlayerSultan" :class="{ \'opacity-50\': isEnemyMoveInProgress }" class="game__cta-button bg-blue-400 hover:bg-blue-600" @click="killGroup(\'blue\')"> Legyőzöm a kékeket </button> </template> <div class="flex flex-grow items-end"> <button class="game__cta-button mt-4 js-restart-game" @click="initializeGame()"> Új leosztás </button> </div> </div> </div> </div> ';e.exports=i},975:function(e){var t='<div> <p class="text-justify"> Ez a játék a XIII. Dürer döntőjén szerepelt E kategóriában. Károly és Dezső m-ig szeretnének elszámolni, és közben a következő játékot játsszák: 0-ról kezdenek, a két játékos felváltva adhat hozzá egy 13-nál kisebb pozitív egészet a korábbi számhoz, azonban a babonájuk miatt ha egyikük x-et adott hozzá, akkor másikuk a következő lépésben nem adhat hozzá 13 − x-et. Az veszít, aki eléri (vagy átlépi) m-et. Az új játék gombra kattintva generálhatsz egy felállást. Az m szám ismeretében te döntheteted el, hogy a kezdő vagy a második játékos bőrébe szeretnél e bújni. </p> <div class="flex flex-wrap" id="two_times_two"> <div class="game__board game_board_small"> <table class="game_table"> <tr> <th>Szám</th> <th>Cél</th> <th>Tiltott lépés</th> </tr> <tr> <td>{{ board.current }}</td> <td>{{ board.target }}</td> <td>{{ board.restricted || \'-\' }}</td> </tr> </table> <template v-if="isGameInProgress"> <label for="step"> Következő lépés: </label> <input id="step" type="number" min="1" max="12" v-model="step" class="border-2"> <button class="game__cta-button" @click="attemptStep()" :class="{ \'opacity-50\': isEnemyMoveInProgress }">Lépek</button> </template> </div> <div class="p-1 flex flex-col flex-grow flex-shrink-0 basis-80"> <p class="text-center font-bold text-lg">{{ ctaText }}</p> <enemy-loader/> <p class="italic text-justify">{{ stepDescription }}</p> <button v-if="isGameReadyToStart" class="game__cta-button js-first-player" @click="startGameAsPlayer({ isFirst: true })"> Kezdő leszek </button> <button v-if="isGameReadyToStart" class="game__cta-button js-second-player" @click="startGameAsPlayer({ isFirst: false })"> Második leszek </button> <div class="flex flex-grow items-end"> <button class="game__cta-button mt-4 js-restart-game" @click="initializeGame()"> Új leosztás </button> </div> </div> </div> </div> ';e.exports=t},4433:function(e){var t='<div> <p class="text-justify"> Adott egy 2 × 2-es táblázat, és hozzá mindkét játékosnak van 3 db korongja. A játék során felváltva tesznek le ezekből egyet-egyet a táblázat tetszőleges mezőjére. A második játékos akkor nyer, ha a játék végén minden mezőben különböző számú korong található. (Azaz 0, 1, 2, 3 a kiosztás a végén valamilyen sorrendben). Minden egyéb esetben pedig a kezdő játékos nyer. Te döntheteted el, hogy a kezdő vagy a második játékos bőrébe szeretnél e bújni. Sok sikert! :) </p> <div class="flex flex-wrap" id="two_times_two"> <div class="game__board game_board_small"> <table class="game_table"> <tr> <td id="pile_0" @click="placePiece(0)"> <span v-for="i in board[0]" :key="i" class="game__piece bg-blue-600 rounded-full mr-1"></span> </td> <td id="pile_1" @click="placePiece(1)"> <span v-for="i in board[1]" :key="i" class="game__piece bg-blue-600 rounded-full mr-1"></span> </td> </tr> <tr> <td id="pile_2" @click="placePiece(2)"> <span v-for="i in board[2]" :key="i" class="game__piece bg-blue-600 rounded-full mr-1"></span> </td> <td id="pile_3" @click="placePiece(3)"> <span v-for="i in board[3]" :key="i" class="game__piece bg-blue-600 rounded-full mr-1"></span> </td> </tr> </table> </div> <div class="p-1 flex flex-col flex-grow flex-shrink-0 basis-80"> <p class="text-center font-bold text-lg">{{ ctaText }}</p> <enemy-loader/> <p class="italic text-justify">{{ stepDescription }}</p> <button v-if="isGameReadyToStart" class="game__cta-button js-first-player" @click="startGameAsPlayer({ isFirst: true })"> Kezdő leszek </button> <button v-if="isGameReadyToStart" class="game__cta-button js-second-player" @click="startGameAsPlayer({ isFirst: false })"> Második leszek </button> <div class="flex flex-grow items-end"> <button class="game__cta-button mt-4 js-restart-game" @click="initializeGame()"> Új leosztás </button> </div> </div> </div> </div> ';e.exports=t},411:function(e){var t='<div> <h1 class="text-blue-600 text-2xl font-bold pb-4">Dürer játékok</h1> <table class="w-full border-collapse"> <thead> <tr> <th v-for="header in [\'Év\', \'Forduló\', \'Kategória\', \'Játék\', \'\']" class="bg-gray-500 border-2 border-gray-300 text-center text-white font-bold p-1">{{ header }}</th> </tr> </thead> <tr v-for="game in gamesToShow" class="odd:bg-gray-200"> <td v-for="gameProp in [game.year, game.round, game.category, game.name]" class="border-2 border-gray-300 text-center p-1">{{ gameProp }}</td> <td class="border-2 border-gray-300 text-center p-1"> <button @click="goToGamePage(game.component)" :class="`rounded-lg px-4 bg-blue-400 hover:bg-blue-600 js-select-${game.component}`">Kipróbálom!</button> </td> </tr> </table> </div> ';e.exports=t},8953:function(e){var t='<div> Sajnáljuk, a keresett oldal nem található. Az alábbi gombra kattintva válassz egy játékot. <button class="rounded-lg px-4 bg-blue-400 hover:bg-blue-600 js-back-to-overview" @click="$router.push(\'/\')">A játékok listájához</button> </div> ';e.exports=t},9758:function(e,t,a){"use strict";var s={};a.r(s),a.d(s,{generateNewBoard:function(){return h},getBoardAfterPlayerStep:function(){return b},makeAiMove:function(){return k}});var r={};a.r(r),a.d(r,{generateNewBoard:function(){return j},getBoardAfterKillingGroup:function(){return G},makeAiMove:function(){return P}});var o={};a.r(o),a.d(o,{generateNewBoard:function(){return _},makeAiMove:function(){return T}});var i={};a.r(i),a.d(i,{generateNewBoard:function(){return N},getBoardAfterPlacingOnTile:function(){return F},makeAiMove:function(){return R}});var n={};a.r(n),a.d(n,{generateNewBoard:function(){return B},getBoardAfterStep:function(){return O},makeAiMove:function(){return D}});var l={};a.r(l),a.d(l,{generateNewBoard:function(){return $},getBoardAfterPlayerStep:function(){return J},makeAiMove:function(){return V}});var d=a(821),c=a(8637),u={name:"enemy-loader",template:a(8773),computed:{...(0,c.Se)(["isEnemyMoveInProgress"])}},m=a(2252),p={name:"heap-splitter",template:a(464),components:{EnemyLoader:u},data:()=>({hoveredPiece:null}),computed:{...(0,c.rn)(["game","board","shouldPlayerMoveNext"]),...(0,c.Se)(["ctaText","isEnemyMoveInProgress","isGameInProgress","isGameReadyToStart","isGameFinished"]),stepDescription(){return this.isGameInProgress&&this.shouldPlayerMoveNext?"Kattints egy korongra, hogy azzal kettéosztd azt a kupacot. Amelyik korongra kattintasz, az és a tőle jobbra lévők kerülnek az új kupacba.":""}},methods:{...(0,c.nv)(["playerMove","startGameAsPlayer","initializeGame"]),clickPiece({rowIndex:e,pieceIndex:t}){this.shouldPlayerMoveNext&&0!==t&&(this.playerMove(this.game.strategy.getBoardAfterPlayerStep(this.board,{rowIndex:e,pieceIndex:t})),this.hoveredPiece=null)},shouldShowDividerToTheLeft(e){return(0,m.Z)(this.hoveredPiece,e)&&0!==e.pieceIndex},currentChoiceDescription(e){if(this.isGameFinished)return"";const t=this.board[e];return!this.isGameReadyToStart&&this.shouldPlayerMoveNext&&this.hoveredPiece?this.hoveredPiece.rowIndex!==e||0===this.hoveredPiece.pieceIndex?t:`${t} --\x3e ${this.hoveredPiece.pieceIndex}, ${t-this.hoveredPiece.pieceIndex}`:t}},created(){this.initializeGame()}},v=a(7956);const g=(e,t)=>2*(0,v.Z)(Math.ceil(e/2),Math.floor(t/2)),h=()=>[(0,v.Z)(3,10),(0,v.Z)(3,10)],b=(e,{rowIndex:t,pieceIndex:a})=>{const s=[a,e[t]-a];return{board:s,isGameEnd:y(s)}},y=e=>1===e[0]&&1===e[1],k=e=>{const t=(0,v.Z)(0,1),a=e[t]%2===0||1===e[1-t]?t:1-t,s=f(e[a]);return{board:s,isGameEnd:y(s)}},f=e=>{if(2===e)return[1,1];const t=1+g(0,e-2);return[t,e-t]};var x={name:"hunyadi-and-the-janissaries",template:a(2428),components:{EnemyLoader:u},computed:{...(0,c.rn)({isPlayerSultan:e=>e.isPlayerTheFirstToMove}),...(0,c.rn)(["game","board","shouldPlayerMoveNext"]),...(0,c.Se)(["ctaText","isEnemyMoveInProgress","isGameInProgress","isGameReadyToStart"]),stepDescription(){return this.isGameInProgress&&this.shouldPlayerMoveNext&&this.isPlayerSultan?"Kattints a katonákra és válaszd két részre a seregedet.":""}},methods:{...(0,c.OI)(["setBoard"]),...(0,c.nv)(["playerMove","startGameAsPlayer","initializeGame"]),toggleGroup(e,t){if(!this.shouldPlayerMoveNext||!this.isPlayerSultan)return;const a=this.board;a[e][t]="blue"===a[e][t]?"red":"blue",this.setBoard(a)},finalizeSoldierGrouping(){this.playerMove({board:this.board,isGameEnd:!1})},killGroup(e){this.playerMove(this.game.strategy.getBoardAfterKillingGroup(this.board,e))}},created(){this.initializeGame()}},z=a(7961);const P=(e,t)=>{if(t){const t=I(e);return G(e,t)}return{board:w(e),isGameEnd:!1}},w=e=>{const t={blue:0,red:0},a=1===(0,v.Z)(0,1)?"red":"blue",s="blue"===a?"red":"blue";for(let r=0;r<e.length;r++)for(let o=0;o<e[r].length;o++){const i=t[a]<t[s]?a:s;e[r][o]=i,t[i]+=.5**r}return e},I=e=>{if(e[0].length>0)return e[0][0];const t={blue:0,red:0};for(let a=0;a<e.length;a++)for(const s of e[a])t[s]+=.5**a;return t["blue"]>t["red"]?"blue":"red"},j=()=>{const e=5;let t=[];for(let a=0;a<e-1;a++){const e=[];0===a&&e.push("blue"),1===(0,v.Z)(0,1)&&e.push("blue"),t.push(e)}t.push([]);for(let a=0;a<e-1;a++)for(let e of t[a])1===(0,v.Z)(0,1)&&(t[a].splice(e,1),t[a+1].push("blue","blue"));return t},G=(e,t)=>{let a,s=!1;for(let r=0;r<e.length;r++){const o=e[r].filter((e=>e!==t));o.length>0&&(0===r?(s=!0,a=!0):e[r-1].push(...o)),e[r]=[]}return 0!==(0,z.Z)(e).length||s||(s=!0,a=!1),{board:e,isGameEnd:s,hasFirstPlayerWon:a}};var M={name:"demonstration",template:a(5470),components:{EnemyLoader:u},computed:{...(0,c.rn)(["game","shouldPlayerMoveNext"]),...(0,c.Se)(["ctaText","isEnemyMoveInProgress","isGameInProgress","isGameReadyToStart","isGameFinished"]),stepDescription(){return this.isGameInProgress&&this.shouldPlayerMoveNext?'Kattints a "Lépek" gombra, hogy lépj.':""}},methods:{...(0,c.nv)(["playerMove","startGameAsPlayer","initializeGame"])},created(){this.initializeGame()}};const _=()=>[],T=e=>({board:e,isGameEnd:!0});var S={name:"two-times-two",template:a(4433),components:{EnemyLoader:u},computed:{...(0,c.rn)(["game","board","shouldPlayerMoveNext"]),...(0,c.Se)(["ctaText","isEnemyMoveInProgress","isGameInProgress","isGameReadyToStart","isGameFinished"]),stepDescription(){return this.isGameInProgress&&this.shouldPlayerMoveNext?"Kattints arra a mezőre, ahova korongot szeretnél lerakni.":""}},methods:{...(0,c.nv)(["playerMove","startGameAsPlayer","initializeGame"]),placePiece(e){this.shouldPlayerMoveNext&&this.playerMove(this.game.strategy.getBoardAfterPlacingOnTile(this.board,e))}},created(){this.initializeGame()}},A=a(2138),E=a(9012);const N=()=>[0,0,0,0],R=e=>{const t=Z(e);return F(e,t)},F=(e,t)=>{const a=(0,A.Z)(e);return a[t]=a[t]+1,{board:a,isGameEnd:(0,E.Z)(a)>=6,hasFirstPlayerWon:!(0,m.Z)([...a].sort(),[0,1,2,3])}},Z=e=>{const t=(0,E.Z)(e);if(t%2===0){if(0===t)return(0,v.Z)(0,3);if(2===t){let t=!1;for(let a=0;a<4;a++)2===e[a]&&(t=!0);if(t){let t=0;while(2!==e[t])t++;return t}{let t=(0,v.Z)(0,3);while(1===e[t])t=(0,v.Z)(0,3);return t}}if(4===t){let t=(0,A.Z)(e);if(t.sort(),t[3]>=3){let t=0;while(e[t]<3)t++;return t}if(0===t[0]){let t=0;while(0!==e[t]&&t<4)t++;return t}return(0,v.Z)(0,3)}}else{if(1===t)return(0,v.Z)(0,3);if(3===t){let t=!1;for(let a=0;a<4;a++)3===e[a]&&(t=!0);if(t){let t=(0,v.Z)(0,3);while(0!==e[t])t=(0,v.Z)(0,3);return t}{let t=(0,v.Z)(0,3);while(1!==e[t])t=(0,v.Z)(0,3);return t}}if(5===t){let t=(0,A.Z)(e);if(t.sort(),3===t[3]){if(2===t[2]){let t=(0,v.Z)(0,3);while(0!==e[t])t=(0,v.Z)(0,3);return t}{let t=(0,v.Z)(0,3);while(1!==e[t])t=(0,v.Z)(0,3);return t}}if(2===t[3]&&2===t[2]){let t=(0,v.Z)(0,3);while(2!==e[t])t=(0,v.Z)(0,3);return t}return(0,v.Z)(0,3)}}},D=e=>O(e,C(e)),B=()=>({current:0,target:(0,v.Z)(20,100),restricted:null}),O=(e,t)=>{const a=e.current+t,s=a>=e.target;return{board:{current:a,target:e.target,restricted:13-t},isGameEnd:s,lastToMoveWins:!1}},H=e=>{let t=e;while(t===e)t=(0,v.Z)(1,12);return t},C=({current:e,target:t,restricted:a})=>(t-e)%14===0||(t-e)%14===1||(t-e)%14-1===a?H(a):(t-e)%14-1;var L={name:"superstitious-counting",template:a(975),components:{EnemyLoader:u},data:()=>({step:1}),computed:{...(0,c.rn)({isPlayerSultan:e=>e.isPlayerTheFirstToMove}),...(0,c.rn)(["game","board","shouldPlayerMoveNext"]),...(0,c.Se)(["ctaText","isEnemyMoveInProgress","isGameInProgress","isGameReadyToStart"]),stepDescription(){return this.isGameInProgress&&this.shouldPlayerMoveNext?'Írj be egy számot, majd kattints a "Lépek" gombra.':""}},methods:{...(0,c.OI)(["setBoard"]),...(0,c.nv)(["playerMove","startGameAsPlayer","initializeGame"]),attemptStep(){this.shouldPlayerMoveNext&&(this.step===this.board.restricted||this.step<=0||this.step>=13?alert("Ez a lépés nem megengedett"):this.playerMove(O(this.board,this.step)))}},created(){this.initializeGame()}},K={name:"heap-splitter-4",template:a(3814),components:{EnemyLoader:u},data:()=>({removedRowIndex:null,hoveredPiece:null}),computed:{...(0,c.rn)(["game","board","shouldPlayerMoveNext"]),...(0,c.Se)(["ctaText","isEnemyMoveInProgress","isGameInProgress","isGameReadyToStart","isGameFinished"]),stepDescription(){return this.isGameInProgress&&this.shouldPlayerMoveNext?"Először kattints az eltávolítandó kupacra, majd arra a korongra, ahol ketté akarod vágni a kupacot.":""}},methods:{...(0,c.nv)(["playerMove","startGameAsPlayer","initializeGame"]),rowColor({rowIndex:e}){return this.isGameInProgress?e===this.removedRowIndex?null===this.hoveredPiece?"red":this.hoveredPiece.rowIndex===e?"blue":"red":null===this.hoveredPiece?"blue":null===this.removedRowIndex&&this.hoveredPiece.rowIndex===e?"red":"blue":"blue"},pieceClickNotAllowed({rowIndex:e,pieceIndex:t}){return null!==this.removedRowIndex&&(this.removedRowIndex!==e&&0===t)},clickPiece({rowIndex:e,pieceIndex:t}){this.shouldPlayerMoveNext&&(this.removedRowIndex!==e?null!==this.removedRowIndex?0!==t&&(this.playerMove(this.game.strategy.getBoardAfterPlayerStep(this.board,{removedRowIndex:this.removedRowIndex,splitRowIndex:e,pieceIndex:t})),this.hoveredPiece=null,this.removedRowIndex=null):this.removedRowIndex=e:this.removedRowIndex=null)},shouldShowDividerToTheLeft(e){return null!==this.removedRowIndex&&(this.removedRowIndex!==e.rowIndex&&((0,m.Z)(this.hoveredPiece,e)&&0!==e.pieceIndex))},currentChoiceDescription(e){if(this.isGameFinished)return"";const t=this.board[e];return this.isGameReadyToStart||!this.shouldPlayerMoveNext?t:e===this.removedRowIndex?this.hoveredPiece&&this.hoveredPiece.rowIndex===e?"Eldobás visszavonása?":`${t} --\x3e 🗑️`:this.hoveredPiece?null===this.removedRowIndex&&this.hoveredPiece.rowIndex===e?`${t} --\x3e 🗑️`:this.hoveredPiece.rowIndex!==e||0===this.hoveredPiece.pieceIndex?t:`${t} --\x3e ${this.hoveredPiece.pieceIndex}, ${t-this.hoveredPiece.pieceIndex}`:t}},created(){this.initializeGame()}},W=a(7274);const $=()=>[(0,v.Z)(4,20),(0,v.Z)(4,20),(0,v.Z)(4,20),(0,v.Z)(4,20)],J=(e,{removedRowIndex:t,splitRowIndex:a,pieceIndex:s})=>{const r=(0,W.Z)([0,1,2,3],[t,a]),o=[e[r[0]],e[r[1]],s,e[a]-s];return{board:o,isGameEnd:X(o)}},X=e=>1===e[0]&&1===e[1]&&1===e[2]&&1===e[3],V=e=>{const t=q(e);return{board:t,isGameEnd:X(t)}},q=e=>{const t=(0,v.Z)(0,3);let a=0;if(e[0]%2===1&&(a+=1),e[1]%2===1&&(a+=1),e[2]%2===1&&(a+=1),e[3]%2===1&&(a+=1),4===a){let a=t;while(1===e[a])a+=1,a%=4;return Q(e,a,(a+1)%4)}if(3===a){let a=t;while(e[a]%2===1)a+=1,a%=4;return Q(e,a,(a+1)%4)}if(2===a){let a=t;while(e[a]%2===1)a+=1,a%=4;let s=(a+1)%4;while(e[s]%2===1)s+=1,s%=4;return Q(e,a,s)}if(1===a){let t=0;while(e[t]%2===0)t+=1,t%=4;if(1===e[t]&&2===e[(t+1)%4]&&2===e[(t+2)%4]&&2===e[(t+3)%4])return Q(e,(t+1)%4,(t+2)%4);{let a=e;return a[t]+=1,a=q(a),a[t]-=1,a}}if(0===a)return 2===e[0]&&2===e[1]&&2===e[2]&&2===e[3]?Q(e,t,(t+1)%4):q(e.map((e=>e/2))).map((e=>2*e))},Q=function(e,t,a){const s=e[t];let r=e;if(2===s)return r[t]=1,r[a]=1,r;const o=1+2*Math.ceil(Math.random()*Math.floor((s-2)/2));return r[t]=o,r[a]=s-o,r},U={HeapSplitter:p,HunyadiAndTheJanissaries:x,Demonstration:M,TwoTimesTwo:S,SuperstitiousCounting:L,HeapSplitter4:K},Y={HunyadiAndTheJanissaries:{year:6,round:"döntő",category:"D",component:"HunyadiAndTheJanissaries",name:"Hunyadi és a janicsárok",strategy:r},HeapSplitter:{year:8,round:"döntő",category:"A",component:"HeapSplitter",name:"Kupac kettéosztó",strategy:s},Demonstration:{name:"Demonstráló játék",component:"Demonstration",strategy:o,isHiddenFromOverview:!0},TwoTimesTwo:{year:13,round:"döntő",category:"A",name:"2x2-es játék",component:"TwoTimesTwo",strategy:i},SuperstitiousCounting:{year:13,round:"döntő",category:"E",name:"Babonás számoló",component:"SuperstitiousCounting",strategy:n},HeapSplitter4:{year:13,round:"döntő",category:"E+",name:"Kupac kettéosztó 4 kupaccal",component:"HeapSplitter4",strategy:l}};var ee={name:"page-not-found",template:a(8953)},te={name:"game",template:a(2448),components:{...U,PageNotFound:ee},props:{gameId:String},computed:{...(0,c.rn)(["game"])},methods:{...(0,c.OI)(["setGame","setGameStatus"]),goBackToOverview(){this.setGame(null),this.setGameStatus(null),this.$router.push("/")},setGameBasedOnRoute(){this.setGame(Y[this.gameId]||null)}},mounted(){this.setGameBasedOnRoute()},watch:{gameId(){this.setGameBasedOnRoute()}}},ae={name:"overview",template:a(411),data:()=>({gamesToShow:Object.values(Y).filter((e=>!e.isHiddenFromOverview))}),methods:{goToGamePage(e){this.$router.push(`/game/${e}`)}}},se={name:"app",template:a(6203),components:{Game:te,Overview:ae},created(){document.title="Dürer játékok"}},re=()=>(0,c.MT)({state:{game:null,board:null,gameStatus:null,isPlayerTheFirstToMove:null,shouldPlayerMoveNext:null,isPlayerWinner:null,enemyMoveTimeoutHandle:null,isEnemyMoveInProgress:null},getters:{isGameInProgress:e=>"inProgress"===e.gameStatus,isGameReadyToStart:e=>"readyToStart"===e.gameStatus,isGameFinished:e=>"finished"===e.gameStatus,isEnemyMoveInProgress:e=>e.isEnemyMoveInProgress&&null!==e.enemyMoveTimeoutHandle,ctaText:(e,t)=>t.isGameInProgress?e.shouldPlayerMoveNext?"Te jössz.":"Mi jövünk.":t.isGameFinished?e.isPlayerWinner?"Nyertél. Gratulálunk! :)":"Sajnos, most nem nyertél, de ne add fel.":"A gombra kattintva tudod elindítani a játékot."},mutations:{setGame(e,t){e.game=t},setGameStatus(e,t){e.gameStatus=t},startGameAsPlayer(e,{isFirst:t}){e.isPlayerTheFirstToMove=t,e.shouldPlayerMoveNext=t,e.gameStatus="inProgress"},setBoard(e,t){e.board=t}},actions:{startGameAsPlayer:({commit:e,dispatch:t},{isFirst:a=!0})=>{e("startGameAsPlayer",{isFirst:a}),a||t("aiMove")},applyMove({state:e,commit:t},{board:a,isGameEnd:s,hasFirstPlayerWon:r,lastToMoveWins:o=!0}){t("setBoard",a),e.shouldPlayerMoveNext=!e.shouldPlayerMoveNext,s&&(clearTimeout(e.enemyMoveTimeoutHandle),e.gameStatus="finished",e.isPlayerWinner=void 0===r?o?!e.shouldPlayerMoveNext:e.shouldPlayerMoveNext:e.isPlayerTheFirstToMove===r)},initializeGame({state:e,commit:t}){clearTimeout(e.enemyMoveTimeoutHandle),e.isEnemyMoveInProgress=!1,e.shouldPlayerMoveNext=null,e.isPlayerWinner=null,e.isPlayerTheFirstToMove=null,e.board=e.game.strategy.generateNewBoard(),t("setGameStatus","readyToStart")},aiMove:async({state:e,dispatch:t})=>{e.isEnemyMoveInProgress=!0;const a=Math.floor(750*Math.random()+750);e.enemyMoveTimeoutHandle=setTimeout((()=>{t("applyMove",e.game.strategy.makeAiMove(e.board,e.isPlayerTheFirstToMove)),e.isEnemyMoveInProgress=!1}),a)},playerMove:({dispatch:e},{board:t,isGameEnd:a,hasFirstPlayerWon:s,lastToMoveWins:r})=>{e("applyMove",{board:t,isGameEnd:a,hasFirstPlayerWon:s,lastToMoveWins:r}),a||e("aiMove")}}}),oe=a(2119);const ie=[{path:"/",component:ae},{path:"/game/:gameId/",component:te,props:!0},{path:"/:path(.*)*",component:ee}];var ne=()=>(0,oe.p7)({history:(0,oe.r5)(),routes:ie});const le=(0,d.ri)(se);le.use(re()),le.use(ne()),le.mount("#app")},9259:function(e,t,a){"use strict";e.exports=a.p+"img/hunyadi-and-the-janissaries-castle.jpg"}},t={};function a(s){var r=t[s];if(void 0!==r)return r.exports;var o=t[s]={exports:{}};return e[s](o,o.exports,a),o.exports}a.m=e,function(){var e=[];a.O=function(t,s,r,o){if(!s){var i=1/0;for(c=0;c<e.length;c++){s=e[c][0],r=e[c][1],o=e[c][2];for(var n=!0,l=0;l<s.length;l++)(!1&o||i>=o)&&Object.keys(a.O).every((function(e){return a.O[e](s[l])}))?s.splice(l--,1):(n=!1,o<i&&(i=o));if(n){e.splice(c--,1);var d=r();void 0!==d&&(t=d)}}return t}o=o||0;for(var c=e.length;c>0&&e[c-1][2]>o;c--)e[c]=e[c-1];e[c]=[s,r,o]}}(),function(){a.d=function(e,t){for(var s in t)a.o(t,s)&&!a.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})}}(),function(){a.g=function(){if("object"===typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"===typeof window)return window}}()}(),function(){a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)}}(),function(){a.r=function(e){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}}(),function(){a.p="/durer-jatekok/"}(),function(){var e={143:0};a.O.j=function(t){return 0===e[t]};var t=function(t,s){var r,o,i=s[0],n=s[1],l=s[2],d=0;if(i.some((function(t){return 0!==e[t]}))){for(r in n)a.o(n,r)&&(a.m[r]=n[r]);if(l)var c=l(a)}for(t&&t(s);d<i.length;d++)o=i[d],a.o(e,o)&&e[o]&&e[o][0](),e[o]=0;return a.O(c)},s=self["webpackChunkdurer_jatekok"]=self["webpackChunkdurer_jatekok"]||[];s.forEach(t.bind(null,0)),s.push=t.bind(null,s.push.bind(s))}();var s=a.O(void 0,[998],(function(){return a(9758)}));s=a.O(s)})();
//# sourceMappingURL=app.js.map