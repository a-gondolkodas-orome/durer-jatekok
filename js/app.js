(function(){var e={6203:function(e){var t='<div class="p-4"> <router-view></router-view> </div> ';e.exports=t},8773:function(e){var t='<div v-show="isEnemyMoveInProgress" class="animate-spin h-8 w-8 place-self-center border-t-blue-600 rounded-full border-4"></div> ';e.exports=t},9102:function(e){var t='<div class="p-1 flex flex-col grow-0 shrink-0 basis-64"> <p class="text-center font-bold text-lg">{{ ctaText }}</p> <enemy-loader/> <p v-if="shouldPlayerMoveNext" class="italic text-justify">{{ stepDescription }}</p> <button v-if="isGameReadyToStart" class="cta-button js-first-player" @click="startGameWithRoleSelection({ isFirst: true })"> Kezdő leszek </button> <button v-if="isGameReadyToStart" class="cta-button js-second-player" @click="startGameWithRoleSelection({ isFirst: false })"> Második leszek </button> <div class="flex flex-grow items-end"> <button class="cta-button mt-4 js-restart-game" @click="restartGame()"> Új leosztás </button> </div> </div> ';e.exports=t},3590:function(e){var t='<div> <p class="text-justify"> Van egy kupacban néhány érme, mindegyik 1, 2 vagy 3 pengős. Egy lépésben az éppen soron lévő játékos elvesz egy érmét a kupacból, és helyette berakhat egy darab kisebb értékű érmét, vagy dönthet úgy, hogy nem tesz be semmit. Az nyer, aki elveszi az utolsó érmét a kupacból. Az új leosztás gombra kattintva generálhatsz egy felállást. A felállás ismeretében te döntheted el, hogy kezdeni szeretnél-e, vagy második játékos lenni. Sok sikert! :) </p> <div class="flex flex-wrap"> <div class="p-1 shrink-0 grow basis-8/12"> <table class="m-2 border-collapse"> <tr> <th>1-es</th> <th>2-es</th> <th>3-as</th> </tr> <tr> <td v-for="coinValue in [0, 1, 2]" :key="coinValue" @click="clickHeap(coinValue)" class="text-center h-36 w-36 border-4 text-8xl" :class="{ \'bg-gray-400\': isCoinActionInvalid(coinValue) }"> <span v-for="i in board[coinValue]" :key="i" class="h-16 w-16 p-1 inline-block rounded-full mr-1" :class="getCoinColor(coinValue)"> </span> </td> </tr> </table> <button v-if="valueOfRemovedCoin" class="cta-button" @click="endTurn()"> Semmit se rakok be </button> </div> <game-sidebar :step-description="stepDescription" @restart="resetTurnState()"/> </div> </div> ';e.exports=t},8818:function(e){var t='<div> <p class="text-justify"> Adott egy téglatest rácsa, aminek be van húzva az egyik testátlója. Egy lépésben az éppen soron lévő játékos megszínezi valamelyik még színezetlen csúcsot három szín valamelyikével (azaz piros, sárga vagy kék korongot tesz rá) úgy, hogy ne keletkezzen két szomszédos csúcs, amik azonos színűek. Ha valamelyik játékos nem tud lépni, akkor véget ér a játék. A kezdő játékos nyer, ha minden csúcs meg lett színezve, míg a második akkor nyer, ha van olyan csúcs ami nem lett kiszínezve Te döntheted el, hogy kezdeni szeretnél-e, vagy második játékos lenni. Sok sikert! :) </p> <div class="flex flex-wrap" id="cube-coloring"> <svg @mousemove="drawPickedColor" height="500" width="700"> <rect x="20" y="140" width="300" height="300" style="fill:transparent;stroke:black;stroke-width:3;fill-opacity:0;stroke-opacity:1"/> <rect x="140" y="20" width="300" height="300" style="fill:transparent;stroke:black;stroke-width:3;fill-opacity:0;stroke-opacity:1"/> <line x1="20" y1="140" x2="140" y2="20" style="stroke:black;stroke-width:3"/> <line x1="320" y1="140" x2="440" y2="20" style="stroke:black;stroke-width:3"/> <line x1="320" y1="440" x2="440" y2="320" style="stroke:black;stroke-width:3"/> <line x1="20" y1="440" x2="140" y2="320" style="stroke:black;stroke-width:3"/> <line x1="320" y1="440" x2="140" y2="20" style="stroke:black;stroke-width:3"/> <circle cx="20" cy="140" r="15" @click="setColor(0)" stroke="black" stroke-width="3" :fill="board.colors[0]"/> <circle cx="320" cy="140" r="15" @click="setColor(1)" stroke="black" stroke-width="3" :fill="board.colors[1]"/> <circle cx="320" cy="440" r="15" @click="setColor(2)" stroke="black" stroke-width="3" :fill="board.colors[2]"/> <circle cx="20" cy="440" r="15" @click="setColor(3)" stroke="black" stroke-width="3" :fill="board.colors[3]"/> <circle cx="140" cy="20" r="15" @click="setColor(4)" stroke="black" stroke-width="3" :fill="board.colors[4]"/> <circle cx="440" cy="20" r="15" @click="setColor(5)" stroke="black" stroke-width="3" :fill="board.colors[5]"/> <circle cx="440" cy="320" r="15" @click="setColor(6)" stroke="black" stroke-width="3" :fill="board.colors[6]"/> <circle cx="140" cy="320" r="15" @click="setColor(7)" stroke="black" stroke-width="3" :fill="board.colors[7]"/> <rect x="550" y="20" rx="5" ry="5" width="80" height="30" @click="clickPicker(\'red\')" stroke="black" stroke-width="2" :fill="board.usedColors[0]"/> <rect x="550" y="70" rx="5" ry="5" width="80" height="30" @click="clickPicker(\'green\')" stroke="black" stroke-width="2" :fill="board.usedColors[1]"/> <rect x="550" y="120" rx="5" ry="5" width="80" height="30" @click="clickPicker(\'blue\')" stroke="black" stroke-width="2" :fill="board.usedColors[2]"/> <circle v-if="show" :cx="x" :cy="y" r="15" :fill="color" fill-opacity="0.5" stroke="white" stroke-width="2" pointer-events="none"/> </svg> <game-sidebar :step-description="stepDescription"></game-sidebar> </div> </div> ';e.exports=t},5470:function(e){var t='<div> <p class="text-justify"> Ez egy példa játék Az új leosztás gombra kattintva generálhatsz egy felállást. A felállás ismeretében te döntheted el, hogy kezdeni szeretnél-e, vagy második játékos lenni. Sok sikert! :) </p> <div class="flex flex-wrap"> <div class="p-1 shrink-0 grow basis-8/12"> <button v-if="shouldPlayerMoveNext" class="cta-button" @click="makeMove()">Lépek!</button> </div> <game-sidebar :step-description="stepDescription"></game-sidebar> </div> </div> ';e.exports=t},2944:function(e){var t='<div> <p class="text-justify"> Ez a játék a VIII. Dürer döntőjén szerepelt B kategóriában. A pályán kezdetben 37 korong van, három kupacban. A soron következő játékos először az egyik kupacot teljes egészében kiveszi a játékból; majd egy másik kupacot kettéoszt két kisebb kupacra (mindkettőbe legalább 1 korongnak kerülnie kell). Egy lépést követően tehát újra három kupac marad. Az a játékos veszít, aki nem tud szabályosan lépni (azaz egyik kupacot se tudja szétosztani). Az új leosztás gombra kattintva generálhatsz egy felállást. A felállás ismeretében te döntheted el, hogy kezdeni szeretnél-e, vagy második játékos lenni. Sok sikert! :) </p> <div class="flex flex-wrap"> <div class="p-1 shrink-0 grow basis-8/12"> <div v-for="rowIndex in [0, 1, 2]" :key="rowIndex" class="border-t-black border-t-2 h-20 p-1 text-left whitespace-nowrap" :class="{ \'border-b-black border-b-2\': rowIndex === 2 }"> <template v-for="(_, pieceIndex) in board[rowIndex]"> <span v-if="shouldShowDividerToTheLeft({ rowIndex, pieceIndex })" class="inline-block border-r-black border-r-4 h-16 border-dotted -ml-1"></span> <span :class="{ \'bg-red-600\': rowColor({ rowIndex }) === \'red\', \'bg-blue-600\': rowColor({ rowIndex }) === \'blue\', \'opacity-50\': (!shouldPlayerMoveNext && isGameInProgress) || rowIndex === removedRowIndex }" class="h-16 w-16 p-1 inline-block rounded-full mr-1" :style="{ \'pointer-events\': shouldPlayerMoveNext ? \'auto\' : \'none\', \'cursor\': pieceClickNotAllowed({ rowIndex, pieceIndex }) ? \'not-allowed\' : \'pointer\' }" @click="clickPiece({ rowIndex, pieceIndex })" @mouseover="hoveredPiece = { rowIndex, pieceIndex }" @mouseout="hoveredPiece = null"></span> </template> <span class="inline-block h-16 align-middle px-2 text-xl -mt-4"> {{ currentChoiceDescription(rowIndex) }} </span> </div> </div> <game-sidebar :step-description="stepDescription" @restart="resetTurnState()"/> </div> </div> ';e.exports=t},3814:function(e){var t='<div> <p class="text-justify"> Ez a játék a XIII. Dürer döntőjén szerepelt E+ kategóriában. A pályán kezdetben négy kupac korong van. A soron következő játékos először az egyik kupacot teljes egészében kiveszi a játékból; majd egy másik kupacot kettéoszt két kisebb kupacra (mindkettőbe legalább 1 korongnak kerülnie kell). Egy lépést követően tehát újra 4 kupac marad. Az a játékos veszít, aki nem tud szabályosan lépni (azaz egyik kupacot se tudja szétosztani). Az új leosztás gombra kattintva generálhatsz egy felállást. A felállás ismeretében te döntheted el, hogy kezdeni szeretnél-e, vagy második játékos lenni. Sok sikert! :) </p> <div class="flex flex-wrap"> <div class="p-1 shrink-0 grow basis-8/12"> <div v-for="rowIndex in [0, 1, 2, 3]" :key="rowIndex" class="border-t-black border-t-2 h-20 p-1 text-left whitespace-nowrap" :class="{ \'border-b-black border-b-2\': rowIndex === 3 }"> <template v-for="(_, pieceIndex) in board[rowIndex]"> <span v-if="shouldShowDividerToTheLeft({ rowIndex, pieceIndex })" class="inline-block border-r-black border-r-4 h-16 border-dotted -ml-1"></span> <span :class="{ \'bg-red-600\': rowColor({ rowIndex }) === \'red\', \'bg-blue-600\': rowColor({ rowIndex }) === \'blue\', \'opacity-50\': (!shouldPlayerMoveNext && isGameInProgress) || rowIndex === removedRowIndex }" class="h-16 w-16 p-1 inline-block rounded-full mr-1" :style="{ \'pointer-events\': shouldPlayerMoveNext ? \'auto\' : \'none\', \'cursor\': pieceClickNotAllowed({ rowIndex, pieceIndex }) ? \'not-allowed\' : \'pointer\' }" @click="clickPiece({ rowIndex, pieceIndex })" @mouseover="hoveredPiece = { rowIndex, pieceIndex }" @mouseout="hoveredPiece = null"></span> </template> <span class="inline-block h-16 align-middle px-2 text-xl -mt-4"> {{ currentChoiceDescription(rowIndex) }} </span> </div> </div> <game-sidebar :step-description="stepDescription" @restart="resetTurnState()"/> </div> </div> ';e.exports=t},464:function(e){var t='<div> <p class="text-justify"> A pályán mindig két kupac korong található. A soron következő játékos választ egy kupacot, és azt szétosztja két kisebb kupacra (mindkettőbe legalább 1 korongnak kerülnie kell), a másik kupacot pedig kidobjuk. Az a játékos veszít, aki nem tud szabályosan lépni (azaz egyik kupacot se tudja szétosztani). Az új leosztás gombra kattintva generálhatsz egy felállást. A felállás ismeretében te döntheted el, hogy kezdeni szeretnél-e, vagy második játékos lenni. Sok sikert! :) </p> <div class="flex flex-wrap js-heap-splitter"> <div class="p-1 shrink-0 grow basis-8/12"> <div v-for="rowIndex in [0, 1]" :key="rowIndex" class="border-t-black border-t-2 h-20 p-1 text-left whitespace-nowrap js-pile" :class="{ \'border-b-black border-b-2\': rowIndex === 1 }"> <template v-for="(_, pieceIndex) in board[rowIndex]"> <span v-if="shouldShowDividerToTheLeft({ rowIndex, pieceIndex })" class="inline-block border-r-black border-r-4 h-16 border-dotted -ml-1"></span> <span :class="{ \'opacity-50\': !shouldPlayerMoveNext && isGameInProgress }" class="js-pebble h-16 w-16 p-1 inline-block bg-blue-600 rounded-full mr-1" :style="{ \'pointer-events\': shouldPlayerMoveNext ? \'auto\' : \'none\', \'cursor\': pieceIndex === 0 ? \'not-allowed\' : \'pointer\' }" @click="clickPiece({ rowIndex, pieceIndex })" @mouseover="hoveredPiece = { rowIndex, pieceIndex }" @mouseout="hoveredPiece = null"></span> </template> <span class="inline-block h-16 align-middle px-2 text-xl -mt-4"> {{ currentChoiceDescription(rowIndex) }} </span> </div> </div> <game-sidebar :step-description="stepDescription"></game-sidebar> </div> </div> ';e.exports=t},2428:function(e,t,r){var o=r(7091),n=r(9259),i=o(n),s='<div> <soldier-svg/> <p class="text-justify"> A török szultán serege megtámadta Hunyadi várát. A várlépcső egyes fokain néhány janicsár áll. Minden reggel a szultán kettéosztja a hadseregét egy piros és egy kék hadtestre. Hunyadi a nap folyamán vagy a piros, vagy a kék sereget megsemmisíti, választása szerint. Éjszaka minden megmaradt janicsár egy lépcsőfokot fellép. Hunyadi nyer, ha a szultán egész seregét megsemmisítette. A szultán nyer, ha lesz olyan janicsár, aki felér a várhoz. Az új játék gombra kattintva generálhatsz egy felállást. A felállás ismeretében te döntheted e, hogy Hunyadiként vagy a török szultánként szeretnél-e játszani. Sok sikert! :) </p> <div class="flex flex-wrap js-hunyadi-and-the-janissaries"> <div class="p-1 shrink-0 grow basis-8/12"> <img src="'+i+'" style="display:block;margin:auto"> <div v-for="rowIndex in [0, 1, 2, 3, 4]" :key="rowIndex" class="border-t-black border-t-2 h-20 p-1 text-left whitespace-nowrap" :class="{ \'border-b-black border-b-2\': rowIndex === 4 }"> <span v-for="(group, pieceIndex) in board[rowIndex]" class="h-16 w-16 p-1 inline-block mx-1 js-clickable-soldier" @click="toggleGroup(rowIndex, pieceIndex)"> <svg class="h-16 w-16 p-1 inline-block" :class="group === \'blue\' ? \'fill-blue-600\' : \'fill-red-600\'"> <use xlink:href="#game-soldier-icon"/> </svg> </span> </div> </div> <div class="p-1 flex flex-col grow-0 shrink-0 basis-64"> <p class="text-center font-bold text-lg">{{ ctaText }}</p> <enemy-loader/> <p class="italic text-justify">{{ stepDescription }}</p> <template v-if="isGameReadyToStart"> <button class="cta-button js-second-player" @click="startGameWithRoleSelection({ isFirst: false })"> Hunyadi leszek </button> <button class="cta-button js-first-player" @click="startGameWithRoleSelection({ isFirst: true })"> Szultán leszek </button> </template> <template v-if="isGameInProgress"> <button v-if="isPlayerSultan" :class="{ \'opacity-50\': isEnemyMoveInProgress }" class="cta-button js-finalize-groups" @click="finalizeSoldierGrouping()"> Lépek </button> <button v-if="!isPlayerSultan" :class="{ \'opacity-50\': isEnemyMoveInProgress }" class="cta-button bg-red-400 hover:bg-red-600 js-kill-red" @click="killGroup(\'red\')"> Legyőzöm a pirosakat </button> <button v-if="!isPlayerSultan" :class="{ \'opacity-50\': isEnemyMoveInProgress }" class="cta-button bg-blue-400 hover:bg-blue-600" @click="killGroup(\'blue\')"> Legyőzöm a kékeket </button> </template> <div class="flex flex-grow items-end"> <button class="cta-button mt-4 js-restart-game" @click="initializeGame()"> Új leosztás </button> </div> </div> </div> </div> ';e.exports=s},379:function(e){var t='<svg style="display:none"> <symbol id="game-soldier-icon" viewBox="0 0 298.167 298.167"> <g> <polygon points="87.226,49.664 87.226,103.334 141.228,103.334 \t"/> <path d="M57.737,224.637c4.569-0.903,9.541-2.088,14.62-3.407c-1.152-5.343-1.774-10.881-1.774-16.564\n        c0-19.615,7.248-37.558,19.186-51.332h118.631c11.937,13.774,19.185,31.717,19.185,51.332c0,5.683-0.622,11.221-1.774,16.564\n        c5.079,1.319,10.051,2.503,14.62,3.407c1.406-6.438,2.154-13.118,2.154-19.971c0-20.161-6.415-38.852-17.31-54.14\n        c3.8-2.721,6.285-7.162,6.285-12.192c0-8.284-6.716-15-15-15h-5h-124h-6c-8.284,0-15,6.716-15,15c0,5.045,2.498,9.496,6.316,12.216\n        c-10.885,15.284-17.293,33.966-17.293,54.116C55.582,211.519,56.33,218.199,57.737,224.637z"/> <path d="M149.083,283.167c-11.725,0-22.848-2.602-32.849-7.23c-10.838-0.202-20.728-0.808-29.685-1.821\n        c16.578,14.942,38.511,24.052,62.533,24.052c24.023,0,45.955-9.109,62.533-24.051c-8.958,1.013-18.847,1.618-29.685,1.82\n        C171.931,280.565,160.808,283.167,149.083,283.167z"/> <circle cx="183.987" cy="184.168" r="12.465"/> <circle cx="114.18" cy="184.168" r="12.465"/> <path d="M168.083,221.334c-4.304,0-8.276,1.383-11.524,3.712v-25.397c0-4.107-3.165-7.688-7.271-7.811\n        c-4.247-0.127-7.729,3.277-7.729,7.496c0,9.756,0,15.835,0,25.678c-3.239-2.309-7.193-3.678-11.476-3.678\n        c-7.958,0-56.993,11.918-79.534,17.277c-5.048,1.2-5.868,7.975-1.294,10.425c20.996,11.245,59.479,11.982,75.34,11.982\n        c2.388,0,4.263-0.017,5.488-0.017c8.982,0,16.56-5.975,19-14.163c2.44,8.188,10.019,14.163,19,14.163\n        c1.225,0,3.103,0.017,5.488,0.017c15.858,0,54.344-0.735,75.34-11.982c4.574-2.45,3.755-9.225-1.294-10.426\n        C225.078,233.251,176.042,221.334,168.083,221.334z"/> <path d="M210.4,27.163c-2.574-6.903-9.207-11.829-17.008-11.829h-27.1C165.3,6.704,157.98,0,149.083,0s-16.217,6.704-17.209,15.334\n        h-26.148c-8.076,0-14.912,5.273-17.276,12.561l60.609,60.61L210.4,27.163z"/> <polygon points="211.226,103.334 211.226,48.664 156.89,103.334 \t"/> </g> </symbol> </svg> ';e.exports=t},975:function(e){var t='<div> <p class="text-justify"> Ez a játék a XIII. Dürer döntőjén szerepelt E kategóriában. Károly és Dezső m-ig szeretnének elszámolni, és közben a következő játékot játsszák: 0-ról kezdenek, a két játékos felváltva adhat hozzá egy 13-nál kisebb pozitív egészet a korábbi számhoz, azonban a babonájuk miatt ha egyikük x-et adott hozzá, akkor másikuk a következő lépésben nem adhat hozzá 13 − x-et. Az veszít, aki eléri (vagy átlépi) m-et. Az új játék gombra kattintva generálhatsz egy felállást. Az m szám ismeretében te döntheteted el, hogy a kezdő vagy a második játékos bőrébe szeretnél e bújni. </p> <div class="flex flex-wrap"> <div class="p-1 shrink-0 grow basis-8/12"> <table class="m-2 border-collapse"> <tr> <th>Szám</th> <th>Cél</th> <th>Tiltott lépés</th> </tr> <tr> <td class="text-center h-36 w-36 border-4 text-8xl">{{ board.current }}</td> <td class="text-center h-36 w-36 border-4 text-8xl">{{ board.target }}</td> <td class="text-center h-36 w-36 border-4 text-8xl">{{ board.restricted || \'-\' }}</td> </tr> </table> <template v-if="shouldPlayerMoveNext"> <label for="step"> Következő lépés: </label> <input id="step" type="number" min="1" max="12" v-model="step" class="border-2"> <button class="cta-button" @click="attemptStep()" :class="{ \'opacity-50\': isEnemyMoveInProgress }">Lépek</button> </template> </div> <game-sidebar :step-description="stepDescription" @restart="resetTurnState()"/> </div> </div> ';e.exports=t},6306:function(e){var t='<div> <p class="text-justify"> Két játékos játszik egy 3 × 3-as táblán kék és piros korongokkal a szokásos amőba szabályai szerint, tehát felváltva tesznek le korongokat, és ha egy sorban, oszlopban vagy átlóban összegyűlik három azonos színű korong, az adott játékos nyer. Ha az első 9 korong lehelyezése után döntetlen az állás (azaz egyik játékos sem nyert), akkor tovább folytatják a játékot, a soron következő játékos az ellenfél egy már lehelyezett korongját lilára színezheti. Ezek után az nyer, aki először hoz létre három lila korongot egy sorban, oszlopban vagy átlóban. Az új leosztás gombra kattintva generálhatsz egy felállást. A felállás ismeretében te döntheted el, hogy kezdeni szeretnél-e, vagy második játékos lenni. Sok sikert! :) </p> <div class="flex flex-wrap"> <div class="p-1 shrink-0 grow basis-8/12"> <table class="m-2 border-collapse"> <tr v-for="row in [0, 1, 2]" :key="row"> <td v-for="col in [0, 1, 2]" :key="col" @click="clickField({ row, col })" class="text-center h-36 w-36 border-4 text-8xl"> <span v-if="board[row * 3 + col]" class="h-16 w-16 p-1 inline-block rounded-full mr-1" :class="pieceColor({ row, col })"></span> </td> </tr> </table> </div> <game-sidebar :step-description="stepDescription"></game-sidebar> </div> </div> ';e.exports=t},4433:function(e){var t='<div> <p class="text-justify"> Adott egy 2 × 2-es táblázat, és hozzá mindkét játékosnak van 3 db korongja. A játék során felváltva tesznek le ezekből egyet-egyet a táblázat tetszőleges mezőjére. A második játékos akkor nyer, ha a játék végén minden mezőben különböző számú korong található. (Azaz 0, 1, 2, 3 a kiosztás a végén valamilyen sorrendben). Minden egyéb esetben pedig a kezdő játékos nyer. Te döntheteted el, hogy a kezdő vagy a második játékos bőrébe szeretnél e bújni. Sok sikert! :) </p> <div class="flex flex-wrap"> <div class="p-1 shrink-0 grow basis-8/12"> <table class="m-2 border-collapse"> <tr v-for="row in [0, 1]" :key="row"> <td v-for="col in [0, 1]" :key="col" @click="placePiece(row * 2 + col)" class="text-center h-36 w-36 border-4 text-8xl"> <span v-for="i in board[row * 2 + col]" :key="i" class="h-16 w-16 p-1 inline-block bg-blue-600 rounded-full mr-1"></span> </td> </tr> </table> </div> <game-sidebar :step-description="stepDescription"></game-sidebar> </div> </div> ';e.exports=t},411:function(e){var t='<div> <h1 class="text-blue-600 text-2xl font-bold pb-4">Dürer játékok</h1> <table class="w-full border-collapse"> <thead> <tr> <th v-for="header in [\'Év\', \'Forduló\', \'Kategória\', \'Játék\', \'\']" class="bg-gray-500 border-2 border-gray-300 text-center text-white font-bold p-1">{{ header }}</th> </tr> </thead> <tr v-for="game in gamesToShow" class="odd:bg-gray-200"> <td v-for="gameProp in [game.year, game.round, game.category, game.name]" class="border-2 border-gray-300 text-center p-1">{{ gameProp }}</td> <td class="border-2 border-gray-300 text-center p-1"> <button @click="goToGamePage(game.component)" :class="`rounded-lg px-4 bg-blue-400 hover:bg-blue-600 js-select-${game.component}`">Kipróbálom!</button> </td> </tr> </table> </div> ';e.exports=t},8953:function(e){var t='<div> Sajnáljuk, a keresett oldal nem található. Az alábbi gombra kattintva válassz egy játékot. <button class="rounded-lg px-4 bg-blue-400 hover:bg-blue-600 js-back-to-overview" @click="$router.push(\'/\')">A játékok listájához</button> </div> ';e.exports=t},487:function(e){var t='<div> <template v-if="gameDefinition"> <button class="rounded-lg px-4 bg-blue-400 hover:bg-blue-600 js-back-to-overview" @click="goBackToOverview()">← Vissza a listához</button> <h1 class="text-blue-600 text-2xl font-bold pb-4">{{ gameDefinition.name }}</h1> <hr/> <component :is="gameId"></component> </template> <page-not-found v-if="!gameDefinition"></page-not-found> </div> ';e.exports=t},4674:function(e,t,r){"use strict";var o={};r.r(o),r.d(o,{generateNewBoard:function(){return w},getGameStateAfterAiMove:function(){return I},getGameStateAfterMove:function(){return P},isTheLastMoverTheWinner:function(){return z}});var n={};r.r(n),r.d(n,{generateNewBoard:function(){return R},getGameStateAfterAiMove:function(){return Z},getGameStateAfterKillingGroup:function(){return N},isTheLastMoverTheWinner:function(){return C}});var i={};r.r(i),r.d(i,{generateNewBoard:function(){return F},getGameStateAfterAiMove:function(){return O},isTheLastMoverTheWinner:function(){return W}});var s={};r.r(s),r.d(s,{generateNewBoard:function(){return K},getGameStateAfterAiMove:function(){return $},getGameStateAfterMove:function(){return V},isTheLastMoverTheWinner:function(){return _}});var a={};r.r(a),r.d(a,{generateNewBoard:function(){return Q},getGameStateAfterAiMove:function(){return q},getGameStateAfterMove:function(){return ee},isTheLastMoverTheWinner:function(){return U}});var l={};r.r(l),r.d(l,{generateNewBoard:function(){return se},getGameStateAfterAiMove:function(){return ce},getGameStateAfterMove:function(){return ae},isTheLastMoverTheWinner:function(){return le}});var d={};r.r(d),r.d(d,{generateNewBoard:function(){return pe},getGameStateAfterAiMove:function(){return be},getGameStateAfterMove:function(){return ve},isTheLastMoverTheWinner:function(){return ke}});var c={};r.r(c),r.d(c,{generateNewBoard:function(){return Te},getGameStateAfterAiMove:function(){return je},getGameStateAfterMove:function(){return Ge},getOptimalAiFlippingPosition:function(){return Re},getOptimalAiPlacingPosition:function(){return Ce},inPlacingPhase:function(){return Me},isTheLastMoverTheWinner:function(){return Se}});var u={};r.r(u),r.d(u,{existsAllowedStep:function(){return Le},generateNewBoard:function(){return De},getGameStateAfterAiMove:function(){return Ee},getGameStateAfterMove:function(){return Fe},hasNeighbourWithSameColor:function(){return We},isAllowedStep:function(){return He},isTheLastMoverTheWinner:function(){return Oe}});var h={};r.r(h),r.d(h,{generateNewBoard:function(){return Je},getGameStateAfterAiMove:function(){return Ye},getGameStateAfterMove:function(){return qe},isTheLastMoverTheWinner:function(){return Xe}});var m=r(821),p=r(8637),v=r(576),k={template:r(8773),computed:{...(0,p.Se)(["isEnemyMoveInProgress"])}},b={name:"game-sidebar",template:r(9102),props:{stepDescription:String},components:{EnemyLoader:k},computed:{...(0,p.rn)(["shouldPlayerMoveNext"]),...(0,p.Se)(["ctaText","isGameReadyToStart"])},methods:{...(0,p.nv)(["startGameWithRoleSelection","initializeGame"]),restartGame(){this.$emit("restart"),this.initializeGame()}},created(){this.initializeGame()}},g=r(676);const y=(e,t)=>2*(0,g.Z)(Math.ceil(e/2),Math.floor(t/2)),f=e=>{const t=(0,g.Z)(0,1),r=e[t]%2===0||1===e[1-t]?t:1-t,o=x(e[r]);return{rowIndex:r,pieceIndex:o}},x=e=>2===e?1:1+y(0,e-2),w=()=>[(0,g.Z)(3,10),(0,g.Z)(3,10)],z=!0,I=e=>P(e,f(e)),P=(e,{rowIndex:t,pieceIndex:r})=>{const o=[r,e[t]-r];return{board:o,isGameEnd:T(o)}},T=e=>1===e[0]&&1===e[1];var j={template:r(464),components:{GameSidebar:b},data:()=>({hoveredPiece:null}),computed:{...(0,p.rn)(["board","shouldPlayerMoveNext"]),...(0,p.Se)(["isGameInProgress","isGameReadyToStart","isGameFinished"]),stepDescription(){return"Kattints egy korongra, hogy azzal kettéosztd azt a kupacot. Amelyik korongra kattintasz, az és a tőle jobbra lévők kerülnek az új kupacba."}},methods:{...(0,p.nv)(["endPlayerTurn","initializeGame"]),clickPiece({rowIndex:e,pieceIndex:t}){this.shouldPlayerMoveNext&&0!==t&&(this.endPlayerTurn(P(this.board,{rowIndex:e,pieceIndex:t})),this.hoveredPiece=null)},shouldShowDividerToTheLeft(e){return(0,v.Z)(this.hoveredPiece,e)&&0!==e.pieceIndex},currentChoiceDescription(e){if(this.isGameFinished)return"";const t=this.board[e];return!this.isGameReadyToStart&&this.shouldPlayerMoveNext&&this.hoveredPiece?this.hoveredPiece.rowIndex!==e||0===this.hoveredPiece.pieceIndex?t:`${t} → ${this.hoveredPiece.pieceIndex}, ${t-this.hoveredPiece.pieceIndex}`:t}},created(){this.initializeGame()}},G={name:"soldier",template:r(379)},S=r(7961);const M=e=>{const t={blue:0,red:0},r=1===(0,g.Z)(0,1)?"red":"blue",o="blue"===r?"red":"blue";for(let n=0;n<e.length;n++)for(let i=0;i<e[n].length;i++){const s=t[r]<t[o]?r:o;e[n][i]=s,t[s]+=.5**n}return e},A=e=>{if(e[0].length>0)return e[0][0];const t={blue:0,red:0};for(let r=0;r<e.length;r++)for(const o of e[r])t[o]+=.5**r;return t["blue"]>t["red"]?"blue":"red"},Z=(e,t)=>{if(t){const t=A(e);return N(e,t)}return{board:M(e),isGameEnd:!1}},C=null,R=()=>{const e=5;let t=[];for(let r=0;r<e-1;r++){const e=[];0===r&&e.push("blue"),1===(0,g.Z)(0,1)&&e.push("blue"),t.push(e)}t.push([]);for(let r=0;r<e-1;r++)for(let e of t[r])1===(0,g.Z)(0,1)&&(t[r].splice(e,1),t[r+1].push("blue","blue"));return t},N=(e,t)=>{let r,o=!1;for(let n=0;n<e.length;n++){const i=e[n].filter((e=>e!==t));i.length>0&&(0===n?(o=!0,r=!0):e[n-1].push(...i)),e[n]=[]}return 0!==(0,S.Z)(e).length||o||(o=!0,r=!1),{board:e,isGameEnd:o,hasFirstPlayerWon:r}};var D={template:r(2428),components:{EnemyLoader:k,SoldierSvg:G},computed:{...(0,p.rn)({isPlayerSultan:e=>e.isPlayerTheFirstToMove}),...(0,p.rn)(["board","shouldPlayerMoveNext"]),...(0,p.Se)(["ctaText","isEnemyMoveInProgress","isGameInProgress","isGameReadyToStart"]),stepDescription(){return this.shouldPlayerMoveNext&&this.isPlayerSultan?"Kattints a katonákra és válaszd két részre a seregedet.":""}},methods:{...(0,p.nv)(["endPlayerTurn","startGameWithRoleSelection","initializeGame"]),toggleGroup(e,t){this.shouldPlayerMoveNext&&this.isPlayerSultan&&(this.board[e][t]="blue"===this.board[e][t]?"red":"blue")},finalizeSoldierGrouping(){this.endPlayerTurn({board:this.board,isGameEnd:!1})},killGroup(e){this.endPlayerTurn(N(this.board,e))}},created(){this.initializeGame()}},E={template:r(5470),components:{GameSidebar:b},computed:{...(0,p.rn)(["shouldPlayerMoveNext"]),stepDescription(){return'Kattints a "Lépek" gombra, hogy lépj.'}},methods:{...(0,p.nv)(["endPlayerTurn","initializeGame"]),makeMove(){this.endPlayerTurn({board:[],isGameEnd:!0})}},created(){this.initializeGame()}};const F=()=>[],O=e=>({board:e,isGameEnd:!0}),W=!0;var H=r(9373),L=r(9012);const B=e=>{const t=(0,L.Z)(e);if(t%2===0){if(0===t)return(0,g.Z)(0,3);if(2===t){let t=!1;for(let r=0;r<4;r++)2===e[r]&&(t=!0);if(t){let t=0;while(2!==e[t])t++;return t}{let t=(0,g.Z)(0,3);while(1===e[t])t=(0,g.Z)(0,3);return t}}if(4===t){let t=(0,H.Z)(e);if(t.sort(),t[3]>=3){let t=0;while(e[t]<3)t++;return t}if(0===t[0]){let t=0;while(0!==e[t]&&t<4)t++;return t}return(0,g.Z)(0,3)}}else{if(1===t)return(0,g.Z)(0,3);if(3===t){let t=!1;for(let r=0;r<4;r++)3===e[r]&&(t=!0);if(t){let t=(0,g.Z)(0,3);while(0!==e[t])t=(0,g.Z)(0,3);return t}{let t=(0,g.Z)(0,3);while(1!==e[t])t=(0,g.Z)(0,3);return t}}if(5===t){let t=(0,H.Z)(e);if(t.sort(),3===t[3]){if(2===t[2]){let t=(0,g.Z)(0,3);while(0!==e[t])t=(0,g.Z)(0,3);return t}{let t=(0,g.Z)(0,3);while(1!==e[t])t=(0,g.Z)(0,3);return t}}if(2===t[3]&&2===t[2]){let t=(0,g.Z)(0,3);while(2!==e[t])t=(0,g.Z)(0,3);return t}return(0,g.Z)(0,3)}}},K=()=>Array(4).fill(0),$=e=>{const t=B(e);return V(e,t)},V=(e,t)=>{const r=(0,H.Z)(e);return r[t]=r[t]+1,{board:r,isGameEnd:(0,L.Z)(r)>=6,hasFirstPlayerWon:!(0,v.Z)([...r].sort(),[0,1,2,3])}},_=null;var J={template:r(4433),components:{GameSidebar:b},computed:{...(0,p.rn)(["board","shouldPlayerMoveNext"]),stepDescription(){return"Kattints arra a mezőre, ahova korongot szeretnél lerakni."}},methods:{...(0,p.nv)(["endPlayerTurn","initializeGame"]),placePiece(e){this.shouldPlayerMoveNext&&this.endPlayerTurn(V(this.board,e))}},created(){this.initializeGame()}};const X=({current:e,target:t,restricted:r})=>(t-e)%14===0||(t-e)%14===1||(t-e)%14-1===r?Y(r):(t-e)%14-1,Y=e=>{let t=e;while(t===e)t=(0,g.Z)(1,12);return t},q=e=>ee(e,X(e)),Q=()=>({current:0,target:(0,g.Z)(20,100),restricted:null}),U=!1,ee=(e,t)=>{const r=e.current+t,o=r>=e.target;return{board:{current:r,target:e.target,restricted:13-t},isGameEnd:o}};var te={template:r(975),components:{GameSidebar:b},data:()=>({step:1}),computed:{...(0,p.rn)(["board","shouldPlayerMoveNext"]),...(0,p.Se)(["isEnemyMoveInProgress"]),stepDescription(){return'Írj be egy számot, majd kattints a "Lépek" gombra.'}},methods:{...(0,p.nv)(["endPlayerTurn","initializeGame"]),attemptStep(){this.shouldPlayerMoveNext&&(this.step===this.board.restricted||this.step<=0||this.step>=13?alert("Ez a lépés nem megengedett"):this.endPlayerTurn(ee(this.board,this.step)))},resetTurnState(){this.step=1}},created(){this.initializeGame()}},re=r(5030),oe=r(7462);const ne=e=>{const t=(0,g.Z)(0,3);let r=0;if(e[0]%2===1&&(r+=1),e[1]%2===1&&(r+=1),e[2]%2===1&&(r+=1),e[3]%2===1&&(r+=1),4===r){let r=t;while(1===e[r])r+=1,r%=4;return ie(e,r,(r+1)%4)}if(3===r){let r=t;while(e[r]%2===1)r+=1,r%=4;return ie(e,r,(r+1)%4)}if(2===r){let r=t;while(e[r]%2===1)r+=1,r%=4;let o=(r+1)%4;while(e[o]%2===1)o+=1,o%=4;return ie(e,r,o)}if(1===r){let t=0;while(e[t]%2===0)t+=1,t%=4;if(1===e[t]&&2===e[(t+1)%4]&&2===e[(t+2)%4]&&2===e[(t+3)%4])return ie(e,(t+1)%4,(t+2)%4);{let r=e;return r[t]+=1,r=ne(r),r[t]-=1,r}}if(0===r)return 2===e[0]&&2===e[1]&&2===e[2]&&2===e[3]?ie(e,t,(t+1)%4):ne(e.map((e=>e/2))).map((e=>2*e))},ie=function(e,t,r){const o=e[t];let n=e;if(2===o)return n[t]=1,n[r]=1,n;const i=1+2*Math.ceil(Math.random()*Math.floor((o-2)/2));return n[t]=i,n[r]=o-i,n},se=()=>[(0,g.Z)(4,18),(0,g.Z)(4,18),(0,g.Z)(4,18),(0,g.Z)(4,18)],ae=(e,{removedRowIndex:t,splitRowIndex:r,pieceIndex:o})=>{const n=(0,re.Z)([0,1,2,3],[t,r]),i=[e[n[0]],e[n[1]],o,e[r]-o];return{board:i,isGameEnd:de(i)}},le=!0,de=e=>(0,oe.Z)(e,(e=>1===e)),ce=e=>{const t=ne(e);return{board:t,isGameEnd:de(t)}};var ue={template:r(3814),components:{GameSidebar:b},data:()=>({removedRowIndex:null,hoveredPiece:null}),computed:{...(0,p.rn)(["board","shouldPlayerMoveNext"]),...(0,p.Se)(["isGameInProgress","isGameReadyToStart","isGameFinished"]),stepDescription(){return this.isGameInProgress&&this.shouldPlayerMoveNext?"Először kattints az eltávolítandó kupacra, majd arra a korongra, ahol ketté akarod vágni a kupacot.":""}},methods:{...(0,p.nv)(["endPlayerTurn","initializeGame"]),rowColor({rowIndex:e}){return this.isGameInProgress?e===this.removedRowIndex?null===this.hoveredPiece?"red":this.hoveredPiece.rowIndex===e?"blue":"red":null===this.hoveredPiece?"blue":null===this.removedRowIndex&&this.hoveredPiece.rowIndex===e?"red":"blue":"blue"},pieceClickNotAllowed({rowIndex:e,pieceIndex:t}){return null!==this.removedRowIndex&&(this.removedRowIndex!==e&&0===t)},clickPiece({rowIndex:e,pieceIndex:t}){this.shouldPlayerMoveNext&&(this.removedRowIndex!==e?null!==this.removedRowIndex?0!==t&&(this.endPlayerTurn(ae(this.board,{removedRowIndex:this.removedRowIndex,splitRowIndex:e,pieceIndex:t})),this.resetTurnState()):this.removedRowIndex=e:this.removedRowIndex=null)},shouldShowDividerToTheLeft(e){return null!==this.removedRowIndex&&(this.removedRowIndex!==e.rowIndex&&((0,v.Z)(this.hoveredPiece,e)&&0!==e.pieceIndex))},currentChoiceDescription(e){if(this.isGameFinished)return"";const t=this.board[e];return this.isGameReadyToStart||!this.shouldPlayerMoveNext?t:e===this.removedRowIndex?this.hoveredPiece&&this.hoveredPiece.rowIndex===e?"Eldobás visszavonása?":`${t} → 🗑️`:this.hoveredPiece?null===this.removedRowIndex&&this.hoveredPiece.rowIndex===e?`${t} → 🗑️`:this.hoveredPiece.rowIndex!==e||0===this.hoveredPiece.pieceIndex?t:`${t} → ${this.hoveredPiece.pieceIndex}, ${t-this.hoveredPiece.pieceIndex}`:t},resetTurnState(){this.hoveredPiece=null,this.removedRowIndex=null}},created(){this.initializeGame()}};const he=function(e){const t=(0,g.Z)(0,2);return e[0]%2===1||e[1]%2===1||e[2]%2===1?e[t]%2===0?e[(t+1)%3]%2===0?me(e,t,(t+1)%3):me(e,t,(t+2)%3):e[(t+1)%3]%2===0?me(e,(t+1)%3,(t+2)%3):e[(t+2)%3]%2===0?me(e,(t+2)%3,(t+1)%3):1!==e[t]?me(e,t,(t+1)%3):1!==e[(t+1)%3]?me(e,(t+1)%3,(t+2)%3):me(e,(t+2)%3,t):2===e[0]&&2===e[1]&&2===e[2]?me(e,t,(t+1)%3):he(e.map((e=>e/2))).map((e=>2*e))},me=function(e,t,r){const o=e[t];let n=e;if(2===o)return n[t]=1,n[r]=1,n;const i=1+2*Math.ceil(Math.random()*Math.floor((o-2)/2));return n[t]=i,n[r]=o-i,n},pe=()=>{const e=(0,g.Z)(4,20),t=(0,g.Z)(Math.max(4,17-e),Math.min(20,33-e));return[e,t,37-e-t]},ve=(e,{removedRowIndex:t,splitRowIndex:r,pieceIndex:o})=>{const n=(0,re.Z)([0,1,2],[t,r]),i=[e[n[0]],o,e[r]-o];return{board:i,isGameEnd:ge(i)}},ke=!0,be=e=>{const t=he(e);return{board:t,isGameEnd:ge(t)}},ge=e=>1===e[0]&&1===e[1]&&1===e[2];var ye={template:r(2944),components:{GameSidebar:b},data:()=>({removedRowIndex:null,hoveredPiece:null}),computed:{...(0,p.rn)(["board","shouldPlayerMoveNext"]),...(0,p.Se)(["isGameInProgress","isGameReadyToStart","isGameFinished"]),stepDescription(){return"Először kattints az eltávolítandó kupacra, majd arra a korongra, ahol ketté akarod vágni a kupacot."}},methods:{...(0,p.nv)(["endPlayerTurn","initializeGame"]),rowColor({rowIndex:e}){return this.isGameInProgress?e===this.removedRowIndex?null===this.hoveredPiece?"red":this.hoveredPiece.rowIndex===e?"blue":"red":null===this.hoveredPiece?"blue":null===this.removedRowIndex&&this.hoveredPiece.rowIndex===e?"red":"blue":"blue"},pieceClickNotAllowed({rowIndex:e,pieceIndex:t}){return null!==this.removedRowIndex&&(this.removedRowIndex!==e&&0===t)},clickPiece({rowIndex:e,pieceIndex:t}){this.shouldPlayerMoveNext&&(this.removedRowIndex!==e?null!==this.removedRowIndex?0!==t&&(this.endPlayerTurn(ve(this.board,{removedRowIndex:this.removedRowIndex,splitRowIndex:e,pieceIndex:t})),this.resetTurnState()):this.removedRowIndex=e:this.removedRowIndex=null)},shouldShowDividerToTheLeft(e){return null!==this.removedRowIndex&&(this.removedRowIndex!==e.rowIndex&&((0,v.Z)(this.hoveredPiece,e)&&0!==e.pieceIndex))},currentChoiceDescription(e){if(this.isGameFinished)return"";const t=this.board[e];return this.shouldPlayerMoveNext?e===this.removedRowIndex?this.hoveredPiece&&this.hoveredPiece.rowIndex===e?"Eldobás visszavonása?":`${t} → 🗑️`:this.hoveredPiece?null===this.removedRowIndex&&this.hoveredPiece.rowIndex===e?`${t} → 🗑️`:this.hoveredPiece.rowIndex!==e||0===this.hoveredPiece.pieceIndex?t:`${t} → ${this.hoveredPiece.pieceIndex}, ${t-this.hoveredPiece.pieceIndex}`:t:t},resetTurnState(){this.hoveredPiece=null,this.removedRowIndex=null}},created(){this.initializeGame()}},fe=r(8146),xe=r(4379),we=r(4911),ze=r(4081),Ie=r(1092),Pe=r(9567);const Te=()=>Array(9).fill(null),je=e=>(Me(e)?e[Ce(e)]="red":e[Re(e)]="purple",Ge(e)),Ge=e=>({board:e,isGameEnd:Ae(e)}),Se=!0,Me=e=>void 0!==e.find(fe.Z),Ae=e=>{const t=(0,xe.Z)(0,9).filter((t=>e[t])),r=(0,we.Z)(t,(t=>e[t]));return(0,ze.Z)(r,Ze)},Ze=e=>{const t=[[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6]];return(0,ze.Z)(t.map((t=>0===(0,re.Z)(t,e).length)))},Ce=e=>{const t=(0,xe.Z)(0,9).filter((t=>(0,fe.Z)(e[t]))),r=t.find((t=>{const r=(0,H.Z)(e);return r[t]="red",Ae(r)}));if(r)return r;const o=t.find((t=>{const r=(0,H.Z)(e);return r[t]="blue",Ae(r)}));return o||(9!==t.length&&(0,fe.Z)(e[4])?4:(0,fe.Z)(e[0])?0:(0,fe.Z)(e[2])?2:(0,Ie.Z)(e,fe.Z))},Re=e=>{const t=(0,xe.Z)(0,9).filter((t=>"blue"===e[t])),r=t.find((t=>{const r=(0,H.Z)(e);return r[t]="purple",Ae(r)}));return r||("blue"===e[4]?4:(0,v.Z)(t,[1,3,5,6,8])?3:(0,v.Z)(t,[0,1,5,6,7])?1:(0,v.Z)(t,[0,2,3,5,7])?5:(0,v.Z)(t,[1,2,3,7,8])?7:(0,v.Z)(t,[1,5,6,8])?8:(0,v.Z)(t,[0,5,6,7])?6:(0,v.Z)(t,[0,2,3,7])?0:(0,v.Z)(t,[1,2,3,8])||(0,v.Z)(t,[1,2,3,6,8])?2:(0,v.Z)(t,[0,1,5,6,8])?8:(0,v.Z)(t,[0,2,5,6,7])?6:(0,v.Z)(t,[0,2,3,7,8])?0:(0,v.Z)(t,[1,3,6,8])?3:(0,v.Z)(t,[0,1,5,6])?1:(0,v.Z)(t,[0,2,5,7])?5:(0,v.Z)(t,[2,3,7,8])?7:(0,Pe.Z)(t))};var Ne={template:r(6306),components:{GameSidebar:b},computed:{...(0,p.rn)(["board","shouldPlayerMoveNext"]),...(0,p.Se)(["isGameInProgress"]),stepDescription(){return Me(this.board)?"Kattints egy üres mezőre.":"Kattints egy piros korongra."}},methods:{...(0,p.nv)(["endPlayerTurn","initializeGame"]),clickField({row:e,col:t}){if(this.shouldPlayerMoveNext){if(Me(this.board)){if(this.board[3*e+t])return;this.board[3*e+t]="blue"}else{if("red"!==this.board[3*e+t])return;this.board[3*e+t]="purple"}this.endPlayerTurn(Ge(this.board))}},pieceColor({row:e,col:t}){const r=this.board[3*e+t];return"red"===r?"bg-red-600":"purple"===r?"bg-purple-600":"bg-blue-600"}},created(){this.initializeGame()}};const De=()=>({usedColors:["red","green","blue"],colors:Array(8).fill("white"),neighbours:{0:[1,3,4],1:[0,2,5],2:[1,3,4,6],3:[0,2,7],4:[0,2,5,7],5:[1,4,6],6:[2,5,7],7:[3,4,6]}}),Ee=e=>(e=Be(e),Fe(e)),Fe=e=>{let t=!$e(e);return{board:e,isGameEnd:Ve(e),hasFirstPlayerWon:t}},Oe=null,We=(e,t,r)=>{for(let o of e.neighbours[t])if(e.colors[o]===r)return!0;return!1},He=(e,t,r)=>!We(e,t,r)&&Ke(e,t),Le=e=>{for(let t of e.usedColors)for(let r in e.colors)if(He(e,r,t))return!0;return!1},Be=e=>{for(let t of e.usedColors){if(He(e,2,t))return e.colors[2]=t,e;if(He(e,4,t))return e.colors[4]=t,e}for(let t of e.usedColors)for(let r in e.colors)if(He(e,r,t))return e.colors[r]=t,e;return!1},Ke=(e,t)=>"white"===e.colors[t],$e=e=>{for(let t in e.colors)if(Ke(e,t))return!0;return!1},Ve=e=>!Le(e);var _e={name:"cube-coloring",template:r(8818),components:{GameSidebar:b},computed:{...(0,p.rn)(["game","board","shouldPlayerMoveNext"]),...(0,p.Se)(["isGameInProgress"]),stepDescription(){return this.isGameInProgress&&this.shouldPlayerMoveNext?"Válassz színt, majd színezz meg egy csúcsot!":""}},data(){return{color:"",show:!1,x:0,y:0}},methods:{...(0,p.nv)(["endPlayerTurn","initializeGame"]),clickPicker(e){this.shouldPlayerMoveNext&&(this.color===e?this.show=!this.show:(this.show=!0,this.color=e))},drawPickedColor(e){this.shouldPlayerMoveNext||(this.show=!1),this.x=e.offsetX,this.y=e.offsetY},setColor(e){this.shouldPlayerMoveNext&&this.show&&He(this.board,e,this.color)&&(this.board.colors[e]=this.color,this.endPlayerTurn(Fe(this.board)))}},created(){this.initializeGame()}};const Je=()=>{const e=[(0,g.Z)(0,6),(0,g.Z)(0,6),(0,g.Z)(0,6)];return 0!==e[1]||0!==e[2]?e:Je()},Xe=!0,Ye=e=>{const t=[0,1,2].filter((t=>e[t]%2===1));return 3!==t.length&&0!==t.length||(e[(0,Ie.Z)(e,(e=>e>0))]-=1),2===t.length&&(e[t[1]]-=1,e[t[0]]+=1),1===t.length&&(e[t[0]]-=1),qe(e)},qe=e=>({board:e,isGameEnd:Qe(e)}),Qe=e=>0===e[0]&&0===e[1]&&0===e[2];var Ue={template:r(3590),components:{GameSidebar:b},data:()=>({valueOfRemovedCoin:null}),computed:{...(0,p.rn)(["board","shouldPlayerMoveNext"]),wasCoinAlreadyRemovedInTurn(){return null!==this.valueOfRemovedCoin},stepDescription(){return this.wasCoinAlreadyRemovedInTurn?"Kattints egy mezőre, hogy visszatégy egy olyan pénzérmét":"Kattints egy mezőre, hogy elvegyél egy olyan pénzérmét"}},methods:{...(0,p.nv)(["endPlayerTurn","initializeGame"]),clickHeap(e){this.shouldPlayerMoveNext&&(this.isCoinActionInvalid(e)||(this.wasCoinAlreadyRemovedInTurn?(this.board[e]+=1,this.endTurn()):(this.valueOfRemovedCoin=e,this.board[e]-=1,0===e&&this.endTurn())))},resetTurnState(){this.valueOfRemovedCoin=null},endTurn(){this.endPlayerTurn(qe(this.board)),this.resetTurnState()},getCoinColor(e){return 0===e?"bg-yellow-700":1===e?"bg-slate-700":"bg-yellow-400"},isCoinActionInvalid(e){return this.wasCoinAlreadyRemovedInTurn?this.valueOfRemovedCoin<=e:0===this.board[e]}},created(){this.initializeGame()}};const et={HeapSplitter:j,HunyadiAndTheJanissaries:D,Demonstration:E,TwoTimesTwo:J,SuperstitiousCounting:te,HeapSplitter4:ue,HeapSplitter3:ye,TicTacToe:Ne,CubeColoring:_e,Coin123:Ue},tt={HunyadiAndTheJanissaries:{year:6,round:"döntő",category:"D",component:"HunyadiAndTheJanissaries",name:"Hunyadi és a janicsárok",strategy:n},HeapSplitter:{year:8,round:"döntő",category:"A",component:"HeapSplitter",name:"Kupac kettéosztó",strategy:o},HeapSplitter3:{year:8,round:"döntő",category:"B",name:"Kupac kettéosztó 3 kupaccal",component:"HeapSplitter3",strategy:d},Demonstration:{name:"Demonstráló játék",component:"Demonstration",strategy:i,isHiddenFromOverview:!0},TwoTimesTwo:{year:13,round:"döntő",category:"A",name:"2x2-es játék",component:"TwoTimesTwo",strategy:s},TicTacToe:{year:13,round:"döntő",category:"C",name:"Átszínezős Tic Tac Toe",component:"TicTacToe",strategy:c},SuperstitiousCounting:{year:13,round:"döntő",category:"E",name:"Babonás számoló",component:"SuperstitiousCounting",strategy:a},HeapSplitter4:{year:13,round:"döntő",category:"E+",name:"Kupac kettéosztó 4 kupaccal",component:"HeapSplitter4",strategy:l},CubeColoring:{year:15,round:"döntő",category:"C",name:"Kockaszínezés",component:"CubeColoring",isHiddenFromOverview:!0,strategy:u},Coin123:{year:15,round:"döntő",category:"B",name:"3, 2, 1 érmék",component:"Coin123",strategy:h}};var rt={template:r(8953)},ot={template:r(487),components:{...et,PageNotFound:rt},props:{gameId:String},computed:{...(0,p.rn)(["gameDefinition"])},methods:{...(0,p.OI)(["setGameDefinition","setGameStatus"]),goBackToOverview(){this.setGameDefinition({gameId:null}),this.setGameStatus(null),this.$router.push("/")},setGameBasedOnRoute(){this.setGameDefinition({gameId:this.gameId})}},mounted(){this.setGameBasedOnRoute()},watch:{gameId(){this.setGameBasedOnRoute()}}},nt={template:r(411),data:()=>({gamesToShow:Object.values(tt).filter((e=>!e.isHiddenFromOverview))}),methods:{goToGamePage(e){this.$router.push(`/game/${e}`)}}},it={template:r(6203),components:{Game:ot,Overview:nt},async errorCaptured(){window.alert("An unexpected error happened, it is our fault, not yours! Try refreshing the page.")}},st=()=>(0,p.MT)({state:{gameDefinition:null,board:null,gameStatus:null,isPlayerTheFirstToMove:null,shouldPlayerMoveNext:null,isPlayerWinner:null,enemyMoveTimeoutHandle:null,isEnemyMoveInProgress:null},getters:{isGameInProgress:e=>"inProgress"===e.gameStatus,isGameReadyToStart:e=>"readyToStart"===e.gameStatus,isGameFinished:e=>"finished"===e.gameStatus,isEnemyMoveInProgress:e=>e.isEnemyMoveInProgress&&null!==e.enemyMoveTimeoutHandle,ctaText:(e,t)=>t.isGameInProgress?e.shouldPlayerMoveNext?"Te jössz.":"Mi jövünk.":t.isGameFinished?e.isPlayerWinner?"Nyertél. Gratulálunk! :)":"Sajnos, most nem nyertél, de ne add fel.":"A gombra kattintva tudod elindítani a játékot."},mutations:{setGameDefinition(e,{gameId:t}){e.gameDefinition=tt[t]||null},setGameStatus(e,t){e.gameStatus=t},setBoard(e,t){e.board=t}},actions:{initializeGame({state:e,commit:t}){clearTimeout(e.enemyMoveTimeoutHandle),e.isEnemyMoveInProgress=!1,e.shouldPlayerMoveNext=null,e.isPlayerWinner=null,e.isPlayerTheFirstToMove=null,e.board=e.gameDefinition.strategy.generateNewBoard(),t("setGameStatus","readyToStart")},startGameWithRoleSelection:({state:e,dispatch:t},{isFirst:r=!0})=>{e.isPlayerTheFirstToMove=r,e.shouldPlayerMoveNext=r,e.gameStatus="inProgress",r||t("makeAiMove")},endPlayerTurn:({dispatch:e},{board:t,isGameEnd:r,hasFirstPlayerWon:o})=>{e("endTurn",{board:t,isGameEnd:r,hasFirstPlayerWon:o}),r||e("makeAiMove")},makeAiMove:async({state:e,dispatch:t})=>{e.isEnemyMoveInProgress=!0;const r=Math.floor(750*Math.random()+750);e.enemyMoveTimeoutHandle=setTimeout((()=>{t("endTurn",e.gameDefinition.strategy.getGameStateAfterAiMove(e.board,e.isPlayerTheFirstToMove)),e.isEnemyMoveInProgress=!1}),r)},endTurn({state:e,dispatch:t},{board:r,isGameEnd:o,hasFirstPlayerWon:n}){if(e.board=r,e.shouldPlayerMoveNext=!e.shouldPlayerMoveNext,o){const r=null===e.gameDefinition.strategy.isTheLastMoverTheWinner?e.isPlayerTheFirstToMove===n:e.gameDefinition.strategy.isTheLastMoverTheWinner===!e.shouldPlayerMoveNext;t("endGame",{isPlayerWinner:r})}},endGame({state:e},{isPlayerWinner:t}){e.isPlayerWinner=t,clearTimeout(e.enemyMoveTimeoutHandle),e.gameStatus="finished",e.shouldPlayerMoveNext=null}}}),at=r(2119);const lt=[{path:"/",component:nt},{path:"/game/:gameId/",component:ot,props:!0},{path:"/:path(.*)*",component:rt}];var dt=()=>(0,at.p7)({history:(0,at.r5)(),routes:lt});const ct=(0,m.ri)(it);ct.use(st()),ct.use(dt()),ct.mount("#app")},9259:function(e,t,r){"use strict";e.exports=r.p+"img/hunyadi-and-the-janissaries-castle.jpg"}},t={};function r(o){var n=t[o];if(void 0!==n)return n.exports;var i=t[o]={exports:{}};return e[o](i,i.exports,r),i.exports}r.m=e,function(){var e=[];r.O=function(t,o,n,i){if(!o){var s=1/0;for(c=0;c<e.length;c++){o=e[c][0],n=e[c][1],i=e[c][2];for(var a=!0,l=0;l<o.length;l++)(!1&i||s>=i)&&Object.keys(r.O).every((function(e){return r.O[e](o[l])}))?o.splice(l--,1):(a=!1,i<s&&(s=i));if(a){e.splice(c--,1);var d=n();void 0!==d&&(t=d)}}return t}i=i||0;for(var c=e.length;c>0&&e[c-1][2]>i;c--)e[c]=e[c-1];e[c]=[o,n,i]}}(),function(){r.d=function(e,t){for(var o in t)r.o(t,o)&&!r.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})}}(),function(){r.g=function(){if("object"===typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"===typeof window)return window}}()}(),function(){r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)}}(),function(){r.r=function(e){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}}(),function(){r.p="/durer-jatekok/"}(),function(){var e={143:0};r.O.j=function(t){return 0===e[t]};var t=function(t,o){var n,i,s=o[0],a=o[1],l=o[2],d=0;if(s.some((function(t){return 0!==e[t]}))){for(n in a)r.o(a,n)&&(r.m[n]=a[n]);if(l)var c=l(r)}for(t&&t(o);d<s.length;d++)i=s[d],r.o(e,i)&&e[i]&&e[i][0](),e[i]=0;return r.O(c)},o=self["webpackChunkdurer_jatekok"]=self["webpackChunkdurer_jatekok"]||[];o.forEach(t.bind(null,0)),o.push=t.bind(null,o.push.bind(o))}();var o=r.O(void 0,[998],(function(){return r(4674)}));o=r.O(o)})();
//# sourceMappingURL=app.js.map